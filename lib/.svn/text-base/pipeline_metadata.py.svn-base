'''
Created on 7 Jun 2010

@author: tcezard
'''
from utils.config import ConfigReader
import logging
from wiki_communication.project_page_parser import get_all_project_page_title,\
    get_project_id_from_page_title , get_project_page_from_id
    
    
class Missing_entry(Exception):
    pass

class Pipeline_metadata_wiki():
    
    def __init__(self):
        """Create the Pipeline_metadata object."""
        pass
    
    def get_all_projects(self):
        """retrieve all the project id"""
        project_page_titles=get_all_project_page_title()
        project_ids=[]
        for project_page_title in project_page_titles:
            project_ids.append(get_project_id_from_page_title(project_page_title))
        return project_ids
        return project_ids
    
    def _get_all_samples_for_one_project(self,project_id):
        """get all the samples for a specified project"""
        project_page=get_project_page_from_id(project_id)
        return project_page.project.samples.keys()
    
    def get_all_samples(self, project_id):
        """get all the samples for a specified project"""
        return self._get_all_samples_for_one_project(project_id)
    
            
    def _get_all_runs_for_one_project_one_sample(self,project_id, sample_id):
        """Get all the run names from one project or for one sample."""
        project_page=get_project_page_from_id(project_id)
        wiki_sample=project_page.project.samples.get(sample_id)
        return [str(run_elemt) for run_elemt in wiki_sample.run_elemt.values()]
        
    def get_all_runs(self, project_id, sample_id):
        """Get all the run names from one project or for one sample."""
        return self._get_all_runs_for_one_project_one_sample(project_id, sample_id) 

class Pipeline_metadata_config():
    
    def __init__(self, config_file):
        """Create the Pipeline_metadata object.
If the wtss_resources is not given it's extracted from the wtss_config"""
        try : 
            self.config_file=config_file
            self._config_reader=ConfigReader(file=config_file)
        except IOError, e:
            logging.critical("File not found %s: exit"%config_file)
    
    def get_all_projects(self):
        """retrieve all the project id"""
        all_attributes=dir(self._config_reader)
        projects=[]
        for attr in all_attributes:
            if not attr.startswith('_'):
                projects.append(attr)
        return projects
    
    def _get_all_samples_for_one_project(self,project_id):
        """get all the samples for a specified project"""
        try:
            dict_config=getattr(self._config_reader,project_id)
        except AttributeError:
            raise Missing_entry('%s does not contain project %s'%(self.config_file,project_id))
        all_samples =[]
        if dict_config is not None:
            samples_str=dict_config.get('samples')
            sp_samples=samples_str.split(',')
            for s in sp_samples:
                all_samples.extend(s.split())
        return all_samples 
    
    def get_all_samples(self, project_id=None):
        """get all the samples for a specified project"""
        all_samples =[]
        if project_id is None:
            for project_id in self.get_all_projects():
                all_samples.extend(self._get_all_samples_for_one_project(project_id))
        elif project_id.__class__==[].__class__:
            for p in project_id:
                all_samples.extend(self._get_all_samples_for_one_project(p))
        else:
            all_samples.extend(self._get_all_samples_for_one_project(project_id))
        return all_samples
    
    def get_project_from_sample(self, sample_id):
        """Get the project id corresponding to a sample id."""
        all_projects=self.get_all_projects()
        for project_id in all_projects:
            if sample_id in self._get_all_samples_for_one_project(project_id):
                return project_id
        return None
            
    def _get_all_runs_for_one_project_one_sample(self,project_id, sample_id):
        """Get all the run names from one project or for one sample."""
        try:
            dict_config=getattr(self._config_reader,project_id)
        except AttributeError:
            raise Missing_entry('%s does not contain project %s'%(self.config_file,project_id))
        all_runs =[]
        if dict_config is not None:
            run_str=dict_config.get(sample_id)
            if run_str:
                sp_run=run_str.split(',')
                for r in sp_run:
                    all_runs.extend(r.split())
            else:
                raise Missing_entry('%s does not contain sample %s'%(self.config_file,sample_id))
        return all_runs 
        
    def get_all_runs(self, project_id=None, sample_id=None):
        """Get all the run names from one project or for one sample."""
        all_runs=[]
        if sample_id is not None and project_id is not None:
            all_runs.extend(self._get_all_runs_for_one_project_one_sample(project_id, sample_id))
        elif sample_id is None and project_id is not None:
            all_samples_id=self.get_all_samples(project_id)
            for sample_id in all_samples_id:
                all_runs.extend(self._get_all_runs_for_one_project_one_sample(project_id, sample_id))
        elif sample_id is not None and project_id is None:
            for project_id in self.get_all_projects():
                for sample in self.get_all_samples(project_id):
                    if sample==sample_id:
                        all_runs.extend(self._get_all_runs_for_one_project_one_sample(project_id, sample_id))
        elif sample_id is None and project_id is None:
            for project_id in self.get_all_projects():
                for sample in self.get_all_samples(project_id):
                    all_runs.extend(self._get_all_runs_for_one_project_one_sample(project_id, sample_id))
        return all_runs
                
        dict_config=getattr(self._config_reader,project_id)
        all_samples =[]
        if dict_config is not None:
            samples_str=dict_config.get('samples')
            sp_samples=samples_str.split(',')
            for s in sp_samples:
                all_samples.extend(s.split())
        return all_samples 

if __name__=="__main__":
    metadata=Pipeline_metadata_config('/home/tcezard/solexa_metadata.txt')
    all_projects=metadata.get_all_projects()
    for project in all_projects:
        for sample in metadata.get_all_samples(project):
            print project, sample, metadata.get_all_runs(project, sample)
