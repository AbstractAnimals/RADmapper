#!/usr/bin/env python
import sys, logging
from optparse import OptionParser
from utils.GenomeLoader import GenomeLoader
from utils import pipeline_constant as constant, utils_logging


def get_sequence_from_file(in_file, chr, start, end, prefix, query_file=None):
    all_queries=[]
    if query_file:
        genome_loader=GenomeLoader(in_file, True, True, prefix)
        for line in open(query_file):
            sp_line = line.strip().split()
            if sp_line[1].split('-')==2:
                start, end = sp_line[1].split('-')
                all_queries.append((sp_line[0],int(start), int(end)))
            elif len(sp_line)>2 and sp_line[1].isdigit() and sp_line[2].isdigit():
                all_queries.append((sp_line[0],int(sp_line[1]),int(sp_line[2])))
            else:
                all_queries.append((sp_line[0],int(sp_line[1]),int(sp_line[1])))
    else:
        genome_loader=GenomeLoader(in_file, False, False, prefix)
        all_queries.append((chr,start, end))
    for (chr,start, end) in all_queries:
        fasta_sequence=genome_loader.get_chr(chr)
        if fasta_sequence:
            (dummy,sequence)=fasta_sequence
            if len(sequence)>=end:
                print sequence[start-1:end]+"\t%s\t%s\t%s"%(chr,start,end)
            else:
                logging.error("length %s = %s : query %s-%s out of bound"%(chr,len(sequence),start,end))
                logging.error("query %s-%s: %s"%(start,len(sequence),sequence[start-1:len(sequence)]))
        else: 
            logging.error("Can't find %s in %s"%(chr, in_file))
            return ''
    

def main():
    utils_logging.init_logging()
    optparser=_prepare_optparser()
    (options,args) = optparser.parse_args()
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    if options.debug:
        utils_logging.init_logging(logging.DEBUG)
    if not options.query_file:
        positions=options.region.split('-')
        if len(positions)==2 and int(positions[0]) <= int(positions[1]):
            start=int(positions[0])
            end=int(positions[1])
        elif len(positions)==1 and int(positions[0])>0:
            start=int(positions[0])
            end=int(positions[0])
        else:
            logging.critical("wrong position value: %s"%options.region)
            sys.exit(1)
        get_sequence_from_file(options.file,options.chromosome, start,end, options.prefix)
    else:
        get_sequence_from_file(options.file,chr=None, start=None,end=None, prefix=options.prefix, query_file=options.query_file)


def _verifyOption(options):
    arg_pass=True
    if not options.query_file:
        if not options.chromosome:
            logging.error("A chromosome must be specified with -c.")
            arg_pass=False
        if not options.region:
            logging.error("A position or range of position must be specified -r.")
            arg_pass=False
    if not options.file:
        logging.error("A file must be specified with the option -f.")
        arg_pass=False
        
    return arg_pass


def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog -c <chromosome> -r <region> -f <file> [-p <prefix>]
try %prog -h for help"""
    description = """Display the sequence on the genome of the specified chromosome and position. Position are 1 based end inclusive."""
    
    optparser = OptionParser(version="%prog v",
                             description=description,
                             usage=usage,
                             add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-c","--chromosome",dest="chromosome",type="string",
                         help="The chromosome you want to query. Default: %default")
    optparser.add_option("-r","--region",dest="region",type="string",
                         help="The position you want to look at. Accept single position and range. Default: %default")
    optparser.add_option("-f","--file",dest="file",type="string",
                         help="The file containing the chromosome you want to query. Default: %default")
    optparser.add_option("-p","--prefix",dest="prefix",type="string",default='',
                         help="An optional prefix to the chromosome. Default: %default")
    optparser.add_option("-q","--query_file",dest="query_file",type="string",default='',
                         help="a file containing query locations. Default: %default")
    optparser.add_option("--debug",dest="debug",action="store_true",default=False,
                         help="Set the script to output debug information. Default: %default")
    return optparser


if __name__=="__main__":
    main()
    
    