#!/usr/bin/env python
'''
Created on 4 Feb 2010

@author: tcezard
'''
import os, sys, logging
from optparse import OptionParser
import utils
from utils import utils_logging
import command_runner
from IO_interface.vcfIO import VcfReader


def annotate_vcf_with_id(vcf_file, annotation_file):
    all_annotations = parse_annotation_file(annotation_file)
    open_vcf_file=utils_logging.open_input_file(vcf_file)
    reader = VcfReader(open_vcf_file)
    print reader.get_header_lines()
    for vcf_record in reader:
        key = '%s\t%s\t%s/%s'%(vcf_record.get_reference(), vcf_record.get_position(), vcf_record.get_reference_base(), vcf_record.get_alt_bases()[0])
        id = all_annotations.pop(key,None)
        if id:
            vcf_record.set_id(id)
        print vcf_record

def parse_annotation_file(annotation_file):
    #Contig1003      20664   AMB-00318863    T/C
    open_anno = utils_logging.open_input_file(annotation_file)
    all_annotations={}
    for line in open_anno:
        sp_line=line.strip().split()
        all_annotations['%s\t%s\t%s'%(sp_line[0],sp_line[1],sp_line[3])]=sp_line[2]
    open_anno.close()
    return all_annotations

def main():
    #initialize the logging
    utils_logging.init_logging()
    #Setup options
    optparser=_prepare_optparser()
    (options,args) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    annotate_vcf_with_id(options.vcf_file, options.annotation_file)
    
        
def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog <-g genome_fasta> <-1 first fastq file> [ -2 second fastq file -n sample_name]"""
    description = """This script will align read in Sanger fastq format to a reference genome and create a bam file. using bwa and samtools"""
    
    prog_version=utils.getWtss_version()
    optparser = OptionParser(version="%prog of wtss_pipeline v"+prog_version,description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-i","--input_file",dest="vcf_file",type="string",
                         help="Path to the input file in vcf format. Default: %default")
    optparser.add_option("-a","--annotation_file",dest="annotation_file",type="string",
                         help="Path to the annotation file. Default: %default")
    
    
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    return arg_pass



if __name__=="__main__":
    main()
