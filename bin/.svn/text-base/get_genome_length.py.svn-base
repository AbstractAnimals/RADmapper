#!/usr/bin/env python
import sys, logging
from optparse import OptionParser
from utils.GenomeLoader import GenomeLoader
from utils import pipeline_constant as constant


def get_length_from_file(in_file):
    genome_loader=GenomeLoader(in_file, False, False)
    sum=0
    for header, sequence in genome_loader:
        sum+=len(sequence)
        print header, len(sequence)
    print "genome size = %d"%sum
    

def main():
    console = logging.StreamHandler(sys.stdout)
    console.setLevel(logging.INFO)
    console.setFormatter(logging.Formatter(constant.default_log_Format))
    logging.getLogger('').addHandler(console)
    logging.getLogger('').setLevel(logging.NOTSET)
    optparser=_prepare_optparser()
    (options,args) = optparser.parse_args()
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    get_length_from_file(options.file)


def _verifyOption(options):
    arg_pass=True
    if not options.file:
        logging.error("A file must be specified with the option -f.")
        arg_pass=False
        
    return arg_pass


def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog -f <file>
try %prog -h for help"""
    description = """Display the length of each fasta sequence from the genome."""
    
    optparser = OptionParser(version="%prog v",
                             description=description,
                             usage=usage,
                             add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-f","--file",dest="file",type="string",
                         help="The file containing the chromosome you want to query. Default: %default")
    return optparser


if __name__=="__main__":
    main()
    
    