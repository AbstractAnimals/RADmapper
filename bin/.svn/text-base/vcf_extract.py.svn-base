#!/usr/bin/env python
'''
Created on 4 Feb 2010

@author: tcezard
'''
import os, sys, logging
from optparse import OptionParser
import utils
from IO_interface.vcfIO import VcfReader
from utils import utils_logging

def vcf_extract(vcf_file, to_keep,to_remove):
    open_vcf = open(vcf_file)
    reader = VcfReader(open_vcf)
    for record in reader:
        genotype_to_keep = record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=to_keep)
        genotype_to_remove = record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=to_remove)
        for key in genotype_to_keep.keys():
            if len(genotype_to_remove)>0 and not genotype_to_remove.get(key):
                print record
        
        
    open_vcf.close()
def main():
    #initialize the logging
    utils_logging.init_logging()
    #Setup options
    optparser=_prepare_optparser()
    (options,args) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    to_keep=options.to_keep.split(',')
    to_remove=options.to_remove.split(',')
    vcf_extract(options.vcf_file, to_keep, to_remove)
    
def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog <-g genome_fasta> <-1 first fastq file> [ -2 second fastq file -n sample_name]"""
    description = """This script will align read in Sanger fastq format to a reference genome and create a bam file. using bwa and samtools"""
    
    prog_version=utils.getWtss_version()
    optparser = OptionParser(version="%prog of wtss_pipeline v"+prog_version,description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-i","--vcf_file",dest="vcf_file",type="string",
                         help="Path to a vcf file where the snps are located. Default: %default")
    optparser.add_option("-k","--keep",dest="to_keep",type="string",
                         help="Comma separated list of sample to in which the SNPs need to be kept. Default: %default")
    optparser.add_option("-r","--remove",dest="to_remove",type="string",
                         help="Comma separated list of sample to in which the SNPs need to be remove. Default: %default") 
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    
    if not options.vcf_file :
        logging.error("You must specify a vcf file.")
        arg_pass=False
    
    return arg_pass



if __name__=="__main__":
    main()
