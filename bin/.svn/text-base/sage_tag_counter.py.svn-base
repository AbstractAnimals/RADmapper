'''
Created on Jan 17, 2011

@author: tcezard
'''
import re
from utils import get_sam_stream, utils_logging
from IO_interface.samIterator import Sam_record
import utils
from optparse import OptionParser
import logging
import sys
from utils.utils_param import check_input_file


def get_count_from_tags(input_bam_file):
    
    sam_stream = get_sam_stream(input_bam_file, options='-F 4')
    for sam_line in sam_stream:
        sam_record = Sam_record(sam_line)
        MD_tag = sam_record.get_tag('MD')
        if MD_tag:
            mismatches_strings = re.findall(r"(\d+)([ATCG]*)",MD_tag)
        else:
            mismatches_strings=[]
        array = []
        for num, base in mismatches_strings:
            if int(num)>0:array.append(num)
            if base: array.append(base)
        if sam_record.is_reverse_strand():
            array.reverse()
        if len(array)>0 and array[0].isdigit() and int(array[0])>=4:
            print sam_record
        else:
            sys.stderr.write(str(sam_record)+'\n')
            pass
            

def main():
    #initialize the logging
    utils_logging.init_logging(logging.INFO)
    #Setup options
    optparser=_prepare_optparser()
    (options,args) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    get_count_from_tags(options.input_bam_file)


def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog <-i input> <-o outputPath> [-q quality -f]"""
    description = """This script is a template to of a python script that include help and option's checking.
    The requirement and assumption of the script can be described here.
    A link to another documentation can also be added here."""
    
    prog_version=utils.getWtss_version()
    optparser = OptionParser(version="%prog of wtss_pipeline v"+prog_version,description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-i","--input_bam_file",dest="input_bam_file",type="string",
                         help="the bam file containing the aligned tag. Default: %default")
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    
    arg_pass = arg_pass and check_input_file(options.input_bam_file, pipe_allowed=True)
    return arg_pass


if __name__=="__main__":
    main()
    
if __name__=="1__main__":
    input_bam_file="/home/tcezard/projects/2010028_Roberta_Bergero_Silene_spp_NlaIII/analysis_genome_Silene_spp/2010_SOL_RB067__Vi/bwa_merged/2010_SOL_RB067_2_run_elemt.bam"
    get_count_from_tags(input_bam_file)
