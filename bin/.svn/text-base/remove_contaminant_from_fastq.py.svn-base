'''
Created on 6 June 2012

@author: tcezard
'''
#!/usr/bin/env python
import  sys, logging
from SNPs import cplx_atgc2iupac
from optparse import OptionParser
from utils import utils_logging, utils_param, longest_common_substr_from_start
from IO_interface.vcfIO import VcfReader, VcfRecord
from run_BWA_commands import run_BWA_Command, check_genome_index
import os
from utils.parameters import Config_file_error
import command_runner


def remove_contaminant_from_fastq(fastq_file1, fastq_file2, genome_file, output_dir):
    run_fine=True
    try:
        pipeline_param=utils_param.get_pipeline_parameters()
        samtools_dir=pipeline_param.get_samtools_dir()
        picard_dir=pipeline_param.get_picard_dir()
    except Config_file_error, e:
        logging.exception('Config_file_error:')
        picard_dir=None
        
    contaminant, ext = os.path.splitext(os.path.basename(genome_file))
    if fastq_file2:
        fastq_common = longest_common_substr_from_start(fastq_file1,fastq_file2)
    else:
        fastq_common = os.path.basename(fastq_file1)
        if fastq_common.endswith('.gz'):
            fastq_common=fastq_common[:-len('.gz')]
        fastq_common,ext= os.path.splitext(fastq_common)
    run_fine = run_BWA_Command(genome_file, fastq_file1, fastq_file2, output_dir, sample_name=fastq_common, clean_up=True, sort=False, thread=4)
    if run_fine:
        output_bam=os.path.join(output_dir,fastq_common+".bam")
        filtered_bam=os.path.join(output_dir,fastq_common+"_no_%s.bam"%contaminant)
        samtools_bin = os.path.join(samtools_dir,"samtools")
        command = "%s view -F 2 -b %s > %s"%(samtools_bin, output_bam, filtered_bam)
        return_code = command_runner.run_command(command)
    if return_code == 0:
        name,ext = os.path.splitext(fastq_file1)
        if ext == '.gz':
            name, ext = os.path.splitext(name)
        filtered_fastq1="%s_no_%s.fastq"%(name,contaminant)
        if fastq_file2:
            name,ext = os.path.splitext(fastq_file2)
            if ext == '.gz':
                name, ext = os.path.splitext(name)
            filtered_fastq2="%s_no_%s.fastq"%(name,contaminant)
            SamToFastq_bin=os.path.join(picard_dir,"SamToFastq.jar")
            command="java -Xmx2G -jar %s I=%s FASTQ=%s SECOND_END_FASTQ=%s VALIDATION_STRINGENCY=SILENT"%(SamToFastq_bin, filtered_bam,filtered_fastq1,filtered_fastq2)
            return_code = command_runner.run_command(command)
        else:
            SamToFastq_bin=os.path.join(picard_dir,"SamToFastq.jar")
            command="java -Xmx2G -jar %s I=%s FASTQ=%s VALIDATION_STRINGENCY=SILENT"%(SamToFastq_bin, filtered_bam,filtered_fastq1)
            return_code = command_runner.run_command(command)
        
    if return_code == 0:
        return True
    else: return False
    

def main():
    #initialise the logging
    utils_logging.init_logging(logging.INFO)
    #Setup options
    optparser=_prepare_optparser()
    (options,dummy) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    if options.print_commands:
        utils_logging.change_log_stdout_to_log_stderr()
    else:
        command_runner.set_command_to_run_localy()
    
    remove_contaminant_from_fastq(options.fastq_file1, options.fastq_file2, options.genome_file, options.output_dir)
    
        

def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog """
    description = """"""
    
    prog_version='0'
    optparser = OptionParser(version="%prog of wtss_pipeline v"+prog_version,description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-g","--genome_file",dest="genome_file",type="string",
                         help="Path to a fasta file where the genome is located. Default: %default")
    optparser.add_option("-1","--fastq1",dest="fastq_file1",type="string",
                         help="Path to the first fastq file where the first reads are. This file is mandatory. Default: %default")
    optparser.add_option("-2","--fastq2",dest="fastq_file2",type="string",
                         help="Path to the second fastq file where the second reads are. This file is optional. Default: %default")
    optparser.add_option("-o","--output_dir",dest="output_dir",type="string",
                         help="The path to the directory where the results will be output. Default: %default")
    optparser.add_option("--print",dest="print_commands",action='store_true',default=False,
                         help="Print the command instead of running them. Default: %default")
    
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    
    if not options.genome_file :
        logging.error("You must specify a genome fasta file.")
        arg_pass=False
    elif not os.path.exists(options.genome_file):
        logging.error("Genome fasta file not found. You must specify an existing genome fasta file.")
        arg_pass=False
    elif not check_genome_index(options.genome_file):
        logging.error("Genome fasta file is not indexed properly. You must index the genome first.")
        arg_pass=False
    if not options.fastq_file1:
        logging.error("You must specify at least one fastq file.")
        arg_pass=False
    elif not os.path.exists(options.fastq_file1):
        logging.error("fastq1 file %s not found. You must specify an existing file."%options.fastq_file1)
        arg_pass=False
    if options.fastq_file2:
        if not os.path.exists(options.fastq_file2):
            logging.error("fastq2 file %s not found. You must specify an existing file."%options.fastq_file2)
            arg_pass=False
    if options.output_dir:
        if not os.path.exists(options.output_dir):
            logging.error("output directory %s not found. You must specify an existing directory."%options.output_dir)
            arg_pass=False
    return arg_pass

if __name__=="__main__":
    main()
