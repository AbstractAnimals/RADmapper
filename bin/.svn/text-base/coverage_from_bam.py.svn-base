'''
Created on 21 Jan 2010

@author: tcezard
'''
#!/usr/bin/env python
import sys, logging
from optparse import OptionParser
import re
from utils.Binning import Distribution_holder
from utils.GenomeLoader import GenomeLoader
from utils import utils_logging, utils_param, get_mpileup_from_bam
import os


def replace_number_base(match_object):
    s=match_object.group()
    m=re.search('[0-9]+',s)
    if m:
        return s[m.end()+int(m.group()):]
    else: return ''

def add_one_value_to_dist(position, value, bin_size, curr_bin, curr_bin_dist, bin_array, coverage_distrib):
    coverage_distrib.add_value(value)
    if bin_size:
        bin=int(position/bin_size)
        if curr_bin!=bin:
            # Add the bin and renew it
            if curr_bin_dist is not None:
                #Get the median
                #bin_array.append(curr_bin_dist.get_percentiles([50]))
                #Get the mean
                bin_array.append(curr_bin_dist.get_mean())
                
            curr_bin_dist=Distribution_holder()
            curr_bin=bin
        curr_bin_dist.add_value(value)
    else:
        curr_bin=None
        curr_bin_dist=None
    return (curr_bin,curr_bin_dist)

def coverage_from_bam(output_file, input_stream, genome_file=None, bin_size=None):
    """
    Pf3D7_09        1       A       A       11      0       6       2       ^(.^&.  HH      (&
    Pf3D7_09        2       A       A       43      0       10      8       ..^).^#.^%.^(.^:.^!,    HHHGHH7H        (&)#%(:!
    Pf3D7_09        3       C       C       49      0       10      10      .......,^%.^*.  HHHCHHAHHH      (&)#%(:!%*
    Pf3D7_09        4       C       C       47      0       9       13      .......,..^".^&.^!.     HHHGHH:HHHHHF   (&)#%(:!%*"&!
"""
    coverage_distrib=Distribution_holder()
    if genome_file:
        open_genome=GenomeLoader(genome_file)

    count_line=0
    prev_coord=0
    curr_chr=None
    curr_bin=-1
    curr_bin_dist=None
    bin_array=[]
    if input_stream is not None:
        
        for line in input_stream:
            count_line+=1
            sp_line = line.strip().split()
            ## do not process line specifying the deletion
            if sp_line[2]=='*':
                continue
            chr=sp_line[0]
            coord=int(sp_line[1])
            if chr!=curr_chr:
                if curr_chr and genome_file:
                    #Add 0 at the end of the chromosome
                    fasta_record=open_genome.get_chr(curr_chr)
                    if fasta_record:
                        (header, sequence)=fasta_record
                        for i in range(prev_coord+1,len(sequence)):
                            
                            (curr_bin, curr_bin_dist)=add_one_value_to_dist(i, 0, bin_size, curr_bin, curr_bin_dist,
                                                                bin_array, coverage_distrib)
                            
                    if bin_size and bin_array:
                        plot_bins_median(output_file, bin_array, bin_size, curr_chr)
                bin_array=[]
                curr_chr=chr
            
            if prev_coord+1<coord:
                for i in range(prev_coord+1, coord):
                    (curr_bin,curr_bin_dist)=add_one_value_to_dist(i, 0, bin_size, curr_bin, curr_bin_dist,
                                                            bin_array, coverage_distrib)
                
            (curr_bin,curr_bin_dist)=add_one_value_to_dist(coord, int(sp_line[3]), bin_size, curr_bin, curr_bin_dist,
                                                            bin_array, coverage_distrib)
            
            if coord%1000000==0:
                print coord
            prev_coord=coord
        input_stream.close()
        
        if curr_chr and genome_file:
            #Add 0 at the end of the chromosome
            fasta_record=open_genome.get_chr(curr_chr)
            if fasta_record:
                (header, sequence)=fasta_record
                for i in range(prev_coord+1,len(sequence)):
                    (curr_bin,curr_bin_dist)=add_one_value_to_dist(i, 0, bin_size, curr_bin, curr_bin_dist,
                                                                bin_array, coverage_distrib)
            
        if bin_size and bin_array:
            plot_bins_median(output_file, bin_array, bin_size, curr_chr)
        coverage_distrib.print_dist(output_file)
        
def plot_bins_median(output_file, bin_array, bin_size, chr, name=None):
    import matplotlib.pyplot as plt
    output_dir=os.path.dirname(output_file)
    base_name,dummy=os.path.splitext(os.path.basename(output_file))
    if name is not None:
        img_output_file=os.path.join(output_dir,'%s_bin_%s_%s.png'%(name,bin_size,chr))
    else:
        img_output_file=os.path.join(output_dir,'%s_bin_%s_%s.png'%(base_name,bin_size,chr))
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    x=range(0,len(bin_array)*bin_size,bin_size)
    plt.plot(x,bin_array, label=chr)
    #plt.xlabel('Coordinate')
    plt.ylabel('Coverage')
    plt.title('Coverage (bin size=%.1fkb)'%(bin_size/1000))
    plt.grid(True)
    plt.xlim([0, len(bin_array)*bin_size])
    plt.ylim([0, int(float(max(bin_array))*1.1)])
    plt.legend(loc=0)
    print "create %s"%img_output_file
    plt.savefig(img_output_file)

def walk_throught_genome(input_stream,genome_file, function, **kwargs):
    if genome_file:
        open_genome=GenomeLoader(genome_file)

    count_line=0
    prev_coord=0
    curr_chr=None
    if input_stream is not None:
        for line in input_stream:
            count_line+=1
            sp_line = line.strip().split()
            ## do not process line specifying the deletion
            if sp_line[2]=='*':
                continue
            chr=sp_line[0]
            coord=int(sp_line[1])
            if chr!=curr_chr:
                if curr_chr and genome_file:
                    #Add 0 at the end of the chromosome
                    fasta_record=open_genome.get_chr(curr_chr)
                    if fasta_record:
                        (header, sequence)=fasta_record
                        for i in range(prev_coord+1,len(sequence)):
                            function(i, 0, **kwargs)
                        
                bin_array=[]
                curr_chr=chr
            
            if prev_coord+1<coord:
                for i in range(prev_coord+1, coord):
                    function(i, 0, **kwargs)
            function(coord, int(sp_line[3]), **kwargs)
            
            if coord%1000000==0:
                print coord
            prev_coord=coord
        input_stream.close()
        
        if curr_chr and genome_file:
            #Add 0 at the end of the chromosome
            fasta_record=open_genome.get_chr(curr_chr)
            if fasta_record:
                (header, sequence)=fasta_record
                for i in range(prev_coord+1,len(sequence)):
                    function(i, 0, **kwargs)

def add_coverage_to_array(coordinate, coverage, array, **kwargs):
    array.append(coverage)

def coverage_compare(input_stream1,input_stream2, genome_file=None):
    array1=[]
    walk_throught_genome(input_stream1, genome_file, function=add_coverage_to_array, array=array1)
    array2=[]
    walk_throught_genome(input_stream2, genome_file, function=add_coverage_to_array, array=array2)
    sum1=sum(array1)
    sum2=sum(array2)
    print len(array1),len(array2), sum1, sum2
    sum1=float(sum1)/1000000
    sum2=float(sum2)/1000000
    bin_size=1000
    bin_dist1=None
    bin_dist2=None
    binned_array1=[]
    binned_array2=[]
    curr_bin=-1
    for position in range(len(array1)):
        bin=position/bin_size
        if bin!=curr_bin:
            if bin_dist1 and bin_dist2:
                binned_array1.append(bin_dist1.get_mean())
                binned_array2.append(bin_dist2.get_mean())
            bin_dist1=Distribution_holder()
            bin_dist2=Distribution_holder()
            curr_bin=bin
        bin_dist1.add_value(array1[position]/sum1)
        bin_dist2.add_value(array2[position]/sum2)
    
    import matplotlib.pyplot as plt
    fig = plt.figure()
    #ax = fig.add_subplot(1,1,1)
    x=range(0,len(binned_array1)*bin_size,bin_size)
    plt.plot(x,binned_array1, '-b', label='solid')
    plt.plot(x,binned_array2, '-r', label='illumina')
    plt.ylabel('Coverage')
    plt.title('Coverage (bin size=%.1fkb)'%(bin_size/1000))
    plt.grid(True)
    plt.xlim([0, len(binned_array1)*bin_size])
    plt.ylim([0, int(float(max(binned_array1))*1.1)])
    plt.legend(loc=0)
    fig.show()
    
def open_input(input_file):
    if input_file.endswith('.bam') :
        input_stream=get_mpileup_from_bam(input_file)
    else:
        input_stream=utils_logging.open_input_file(input_file)
    return input_stream
            
def main():
    #initialise the logging
    utils_logging.init_logging()
    #Setup options
    optparser=_prepare_optparser()
    (options,dummy) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    
    input_stream=get_mpileup_from_bam(bam_file=options.input_file, genome_file=options.genome_file, options='-d 50000')
    
    coverage_from_bam(options.output_file,input_stream,
                      genome_file=options.genome_file,
                      bin_size=options.bin_size)
    

def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog """
    description = """"""
    
    prog_version='0'
    optparser = OptionParser(version="%prog of wtss_pipeline v"+prog_version,description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-i","--input",dest="input_file",type="string",
                         help="Path to a pileup file of which you want the coverage you can use PIPE to pipe the input data. Default: %default")
    optparser.add_option("-o","--output",dest="output_file",type="string",
                         help="Path to a file where the results will be output. Default: %default")
    optparser.add_option("-g","--genome_file",dest="genome_file",type="string",
                         help="Path to a fasta file containing all the chromosomes. Default: %default")
    optparser.add_option("-b","--bin_size",dest="bin_size",type="int",
                         help="Plot the coverage with the specified bin size. Default: desactivated")
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    
    arg_pass = utils_param.check_input_file(options.input_file, pipe_allowed=True)
    
    if not options.output_file:
        logging.error("You must specify and output file.")
        arg_pass=False
    return arg_pass



if __name__=="__main__":
    main()
    #utils_logging.init_logging()
    #input_file1='/home/tcezard/projects/solid_trial_ecoli/20100126_8_Ecoli/6991/reads_fixed/6991_merged.bam'
    #input_file2='/home/tcezard/projects/solid_trial_ecoli/illumina_e_coli/6991/bwa/s_8_sequence_6991_sorted.bam'
    #genome_file='/home/tcezard/genomes/escherichia_coli/O157H7_EDL933/E_Coli_O157H7_EDL933.fasta'
    #input_stream1=utils.get_pileup_from_bam(input_file1)
    #input_stream2=utils.get_pileup_from_bam(input_file2)
    #coverage_compare(input_stream1, input_stream2, genome_file)
