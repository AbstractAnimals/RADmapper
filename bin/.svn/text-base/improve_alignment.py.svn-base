#!/usr/bin/env python
import os, sys, logging
from optparse import OptionParser
import utils
from utils import utils_logging, utils_param
import glob
import command_runner
from utils.parameters import Config_file_error


def improve_alignment_with_GATK(input_bam, genome_file, picard_dir=None, GATK_dir=None):
    if picard_dir is None or GATK_dir is None:
        try:
            pipeline_param=utils_param.get_pipeline_parameters()
            picard_dir=pipeline_param.get_picard_dir()
            GATK_dir=pipeline_param.get_gatk_dir()
        except Config_file_error, dummy:
            logging.error("You'll need to specify the Picard and Gatk directory or set the PIPELINE_CONFIG environment variable")
            return False
    
    genome_dict = utils.create_sequence_dictionary(picard_dir, genome_file)
    if not genome_dict:
        return False
    genome_fai = utils.generate_fai_from_genome(genome_file)
    if not genome_fai:
        return False
    index_bam = utils.index_bam_file(bam_file=input_bam)
    if not index_bam:
        return False
    GenomeAnalysisTK_jar=os.path.join(GATK_dir,'GenomeAnalysisTK.jar')
    name, dummy= os.path.splitext(input_bam)
    intervals_file=name+'.intervals'
    command= 'java -Xmx8G -jar %s -T RealignerTargetCreator -I %s -o %s -R %s'%(GenomeAnalysisTK_jar, input_bam,
                                                                         intervals_file, genome_file)
    return_code=command_runner.run_command(command)
    if return_code!=0:
        return False
    realigned_bam=name+'_realigned.bam'
    command= 'java -Xmx8G -jar %s -T IndelRealigner -I %s  --out %s -targetIntervals %s -R %s'%(GenomeAnalysisTK_jar,input_bam,
                                                                                         realigned_bam, intervals_file, genome_file)
    return_code=command_runner.run_command(command)
    if return_code!=0:
        return False
    command='rm -f %s'%(intervals_file)
    return_code=command_runner.run_command(command)
    if return_code!=0:
        return False
    

def main():
    #initialize the logging
    utils_logging.init_logging()
    #Setup options
    optparser=_prepare_optparser()
    (options,dummy) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    if not options.print_command:
        command_runner.set_command_to_run_localy()
    improve_alignment_with_GATK(options.input_bam, options.genome_file,
                                options.picard_dir, options.GATK_dir)
    

def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog <-i input>  [-q quality -f]"""
    description = """This script will run (or print) GATK realigner on the indels locations."""
    
    prog_version=utils.getWtss_version()
    optparser = OptionParser(version="%prog of wtss_pipeline v"+prog_version,description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-i","--input_bam",dest="input_bam",type="string",
                         help="Path to an input bam file aligned against the reference. Default: %default")
    optparser.add_option("-g","--genome_file",dest="genome_file",type="string",
                         help="Path to the fasta file containing the full genome. Default: %default")
    optparser.add_option("-P","--picard_dir",dest="picard_dir",type="string",
                         help="Path to the directory where the picard jars are located this will override the directory set in the configuration file. Default: %default")
    optparser.add_option("-G","--GATK_dir",dest="GATK_dir",type="string",
                         help="Path to the directory where the GATK jars are located this will override the directory set in the configuration file. Default: %default")
    optparser.add_option("--print",dest="print_command",action="store_true",default=False,
                         help="This flag set the script to print the command instead of executing them. Default: %default")
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    
    # Test options
    arg_pass= arg_pass and utils_param.check_input_file(options.input_bam, pipe_allowed=False)
    arg_pass= arg_pass and utils_param.check_input_file(options.genome_file, pipe_allowed=False)
    return arg_pass


if __name__=="__main__":
    main()