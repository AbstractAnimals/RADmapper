import sys
import utils
from IO_interface import samIterator
from utils.GenomeLoader import GenomeLoader
from utils import DNA_tools, utils_logging
import os
import logging
from optparse import OptionParser
import command_runner

def bam_to_fastq(bam_file,genome_file):
    stream = utils.get_sam_stream(bam_file)
    genome_loader=GenomeLoader(genome_file, keep_in_memory=True, keep_until_done=True)
    for line in stream:
        sam_record = samIterator.Sam_record(line)
        sam_record = fix_sam_record_from_reference(sam_record, genome_loader)
        print sam_record_to_fastq(sam_record)

def bam_detect_RAD_sites(bam_file, genome_file, restriction_site_seq='TGCAG', extension=1):
    stream = utils.get_sam_stream(bam_file, options='-F 128')
    genome_loader=GenomeLoader(genome_file, keep_in_memory=True, keep_until_done=True)
    count_good_reads=0
    count_not_good_reads=0
    count_line=0
    all_sites_position=set()
    
    for line in stream:
        sam_record = samIterator.Sam_record(line)
        if sam_record.is_first_read() and not sam_record.is_unmapped():
            ref=sam_record.get_reference_name()
            pos=sam_record.get_position()
            align_length=sam_record.get_alignment_length()
            read = sam_record.get_query_sequence()
            (header,sequence) = genome_loader.get_chr(ref)
            if sam_record.is_reverse_strand():
                res_site_on_genome = DNA_tools.rev_complements(sequence[pos+align_length-len(restriction_site_seq)-1:pos+align_length-1])
                res_site_on_read = read[align_length-len(restriction_site_seq)-1:align_length-1]
                pos+=align_length-len(restriction_site_seq)+1
                
            else:
                res_site_on_genome=sequence[pos-1:pos+len(restriction_site_seq)-1]
                res_site_on_read = read[:len(restriction_site_seq)]    
            if res_site_on_genome==restriction_site_seq:
                count_good_reads+=1
                if sam_record.is_reverse_strand():
                    strand ='-'
                else:
                    strand ='+'
                all_sites_position.add((ref,pos,strand))
                #print ref, pos, strand
            else:
                count_not_good_reads+=1
        count_line+=1
        if count_line%100000==0:
            print count_line,len(all_sites_position),count_good_reads,count_not_good_reads
    print "%s good sites"%(len(all_sites_position))
    print "%s good read"%(count_good_reads)
    print "%s bad reads"%(count_not_good_reads)
    
    
def load_known_sites(know_sites_file):
    all_sites={}
    try:
        open_file = open(know_sites_file)
        for line in open_file:
            reference, position = line.strip().split()
            all_sites[(reference, int(position) )]=1
    finally:
        open_file.close()
    return all_sites
        
        
def load_from_sites_generator(known_sites, bam_file, restriction_site_seq):
    stream = utils.get_sam_stream(bam_file)
    all_unmatched_read1={}
    all_unmatched_read2={}
    count_line=0
    for line in stream:
        count_line+=1
        if count_line%10000==0:
            print count_line, len(all_unmatched_read1), len(all_unmatched_read2)
        sam_record = samIterator.Sam_record(line)
        if sam_record.is_first_read():
            sam_record_r2 = all_unmatched_read2.pop(sam_record.get_query_name(),None)
            info=None
            if not sam_record.is_unmapped():
                info = get_RAD_site_from_sam_record(sam_record, known_sites, restriction_site_seq)
            if sam_record_r2:
                if info:
                    yield((sam_record,sam_record_r2, info))
            else:
                all_unmatched_read1[sam_record.get_query_name()]=sam_record
        else:
            sam_record_r1 = all_unmatched_read1.pop(sam_record.get_query_name(),None)
            if sam_record_r1:
                info = get_RAD_site_from_sam_record(sam_record_r1, known_sites, restriction_site_seq)
                if info:
                    yield((sam_record_r1,sam_record, info))
            else:
                all_unmatched_read2[sam_record.get_query_name()]=sam_record
                
def process_bam_file(know_sites_file, bam_file, genome_file, restriction_site_seq='TGCAG'):
    known_sites = load_known_sites(know_sites_file)
    genome_loader=GenomeLoader(genome_file, keep_in_memory=True, keep_until_done=True)
    sam_pair_generator = load_from_sites_generator(known_sites, bam_file, restriction_site_seq)
    current_file=None
    current_open_file=None
    for sam_record_r1,sam_record_r2, site_info in sam_pair_generator:
        reference, position, strand = site_info
        file_name='site_%s_%s_%s.fastq'%(reference, position, strand)
        if current_file!=file_name:
            if not current_open_file is None:
                current_open_file.close()
            print "write to %s"%os.path.abspath(file_name)
            current_open_file=open(file_name,'a')
            current_file=file_name
        rgid=sam_record_r1.get_tag('RG')
        sam_record_r2 = fix_sam_record_from_reference(sam_record_r2, genome_loader)
        current_open_file.write(sam_record_to_fastq(sam_record_r2,rgid=rgid))
        current_open_file.write('\n')
        
                        
def get_RAD_site_from_sam_record(sam_record, known_sites, restriction_site_seq):
    if sam_record.is_first_read() and not sam_record.is_unmapped():
        ref=sam_record.get_reference_name()
        pos=sam_record.get_position()
        align_length=sam_record.get_alignment_length()
        if sam_record.is_reverse_strand():
            site_position = pos+align_length-len(restriction_site_seq)
            strand='-'
        else:
            site_position = pos-1
            strand='+'
        if known_sites.has_key((ref, int(site_position))):
            return (ref, int(site_position), strand)
    return None
            
def align_contig_to_genome(contig_file,genome_file):
    blast_bin='/ifs/software/linux_x86_64/blast+/current/bin/blastn'
    blast_command='%s -query %s -db %s -max_target_seqs 1 -outfmt 6'%(blast_bin, contig_file, genome_file)
    command_runner.run_command(blast_command)
    
def fix_sam_record_from_reference(sam_record, genome_loader):
    if not sam_record.is_unmapped():
        reference = sam_record.get_reference_name()
        position = sam_record.get_position()
        (header,sequence) = genome_loader.get_chr(reference)
        
        length = len(sam_record.get_query_sequence())
        sam_record.set_query_sequence(sequence[position-1:position+length-1])
        sam_record.set_cigar_string('%sM'%length)
    return sam_record
        
def main():
    #initialize the logging
    utils_logging.init_logging(logging.INFO)
    #Setup options
    optparser=_prepare_optparser()
    (options,args) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    process_bam_file(known_sites_file=options.know_sites,
                     bam_file=options.bam_file,
                     genome_files=options.genome_file,
                     restriction_site_seq=options.restriction_site)

    
def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog <-b bam_file> <-g genome_file> <-k known_sites>"""
    description = """This script extract reads from an aligned bam file and create the corresponding fastq files."""
    
    optparser = OptionParser(description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-b","--bam_file",dest="bam_file",type="string",
                         help="The bam file from which the reads should be extracted.")
    optparser.add_option("-g","--genome_file",dest="genome_file",type="string",
                         help="The genome file with the tag aligned to the genome.")
    optparser.add_option("-k","--known_site",dest="known_site",type="string",
                         help="The file containing the sites of interest that need to be extracted.")
    optparser.add_option("-r","--restriction_site",dest="restriction_site",type="string", default="TGCAG",
                         help="The sequenced part of the restriction site.")
    
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    
    if not options.bam_file:
        logging.error("You must specify a bam file -b.")
        arg_pass=False
    return arg_pass



if __name__=="__main__":
    main()        

if __name__=="__main__":
    bam_file=sys.argv[1]
    genome_file=sys.argv[2]
    know_sites_file=sys.argv[3]
    
    #bam_to_fastq(bam_file,genome_file)
