'''
Created on 25 Jan 2010

@author: tcezard
'''
#!/usr/bin/env python
import os, sys, logging
from optparse import OptionParser
from utils.GenomeLoader import GenomeLoader
# this import impose to have the lib in the PYTHONPATH
# you can remove it and change the logging format to '%(asctime)15s: %(levelname)s %(message)s'  

def compare_list_bases_to_genome(open_input, genome_file):
    genome_loader=GenomeLoader(genome_file,keep_until_done=True)
    count_difference_ref=0
    count_same_ref=0
    count_difference_snp=0
    count_same_snp=0
    
    for line in open_input:
        sp_line=line.strip().split()
        chr=sp_line[0]
        coordinate=int(sp_line[1])
        base=sp_line[2]
        (header, sequence)=genome_loader.get_chr(chr)
        if base != sequence[coordinate-1]: 
            #print '%s\t%s\t%s\t%s'%(chr,coordinate,base,sequence[coordinate-1])
            count_difference_ref+=1
            if sp_line[3]!=sequence[coordinate-1]:
                count_difference_snp+=1
            else:
                count_same_snp+=1
        else:
            count_same_ref+=1
    print '%s snps (%s) have a reference base different from the genomic base'%(count_difference_ref,
                                                                                float(count_difference_ref)/(count_difference_ref+count_same_ref)*100)
    print 'From those, %s snps (%s) have a snp base different from the genomic base'%(count_difference_snp,
                                                                                float(count_difference_snp)/(count_difference_snp+count_same_snp)*100)
    print ' and %s snps (%s) have a snp base indentical to the genomic base'%(count_same_snp,
                                                                                float(count_same_snp)/(count_difference_snp+count_same_snp)*100)
    print '%s snps (%s) have a reference base identical to the genomic base'%(count_same_ref,
                                                                              float(count_same_ref)/(count_difference_ref+count_same_ref)*100)
        
def main():
    #initialize the logging
    #Setup options
    optparser=_prepare_optparser()
    (options,args) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    open_input=open(options.input_file)
    compare_list_bases_to_genome(open_input, options.genome_file)


def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog <-i input> <-o outputPath> [-q quality -f]"""
    description = """"""
    
    prog_version="UNVERSIONED"
    optparser = OptionParser(version="%prog of wtss_pipeline v"+prog_version,description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-i","--input",dest="input_file",type="string",
                         help="Path to a file where the input data are located. Default: %default")
    optparser.add_option("-o","--output",dest="output_file",type="string",
                         help="Path to a file where the results will be output. Default: %default")
    optparser.add_option("-q","--genome_file",dest="genome_file",type="string",
                         help="The file containing the genome in fasta format. Default: %default")
    
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    
    # Test output_file
    #if not options.output_file:
    #    logging.error("You must specify and output file.")
    #    arg_pass=False
    return arg_pass



if __name__=="__main__":
    main()



