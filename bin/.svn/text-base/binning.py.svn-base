'''
Created on 22 Jan 2010

@author: tcezard
'''
#!/usr/bin/env python
import os, sys, logging
from optparse import OptionParser
# this import impose to have the lib in the PYTHONPATH
# you can remove it and change the logging format to '%(asctime)15s: %(levelname)s %(message)s'  


def binning(open_input, open_output, bin_size):
    all_bins={}
    for line in open_input:
        sp_line=line.strip().split()
        bin=int(sp_line[0])/bin_size
        if all_bins.has_key(bin):
            all_bins[bin]+=1
        else:
            all_bins[bin]=1
    keys=all_bins.keys()
    keys.sort()
    for key in keys:
        open_output.write('%s\t%s\n'%((key+1)*bin_size,all_bins[key]))
        
def binning_per_chromosome(open_input, open_output, bin_size, chr_pos=0, coord_pos=1):
    all_chromosomes={}
    all_bins={}
    for line in open_input:
        sp_line=line.strip().split()
        chr=sp_line[chr_pos]
        all_bins=all_chromosomes.get(chr)
        if all_bins is None:
            all_bins={}
            all_chromosomes[chr]=all_bins
        bin=int(sp_line[coord_pos])/bin_size
        if all_bins.has_key(bin):
            all_bins[bin]+=1
        else:
            all_bins[bin]=1
    max_bin=0
    for chr in all_chromosomes.keys():
        bins=all_chromosomes[chr].keys()
        if max_bin<max(bins):
            max_bin=max(bins)
    all_chr=all_chromosomes.keys()
    all_chr.sort()
    
    open_output.write('bin')
    for chr in all_chr:
        open_output.write('\t%s'%chr)
    open_output.write('\n')
    for bin in range(0,max_bin):
        open_output.write('%s'%((bin+1)*bin_size))
        for chr in all_chr:
            value=all_chromosomes.get(chr).get(bin)
            if value is None:
                value=0
            open_output.write('\t%s'%value)
        open_output.write('\n')



def main():
    #Setup options
    optparser=_prepare_optparser()
    (options,args) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    if options.input_file is None:
        open_input=sys.stdin
    else:
        open_input=open(options.input_file)
    if options.output_file is None:
        open_output=sys.stdout
    else:
        open_output=open(options.output_file, 'w')
    binning_per_chromosome(open_input, open_output, options.bin_size)

def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog <-i input> <-o outputPath> [-q quality -f]"""
    description = """This script is a template to of a python script that include help and option's checking.
    The requirement and assumption of the script can be described here.
    A link to another documentation can also be added here."""
    
    prog_version="UNVERSIONED"
    optparser = OptionParser(version="%prog of wtss_pipeline v"+prog_version,description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-i","--input",dest="input_file",type="string",
                         help="Path to a file where the input data are located. Default: %default")
    optparser.add_option("-o","--output",dest="output_file",type="string",
                         help="Path to a file where the results will be output. Default: %default")
    optparser.add_option("-b","--bin_size",dest="bin_size",type="int",default=10,
                         help="The size of the bin that you want to use. Default: %default")
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    
    # Test output_file
    if not options.bin_size:
        logging.error("You must specify a bin size.")
        arg_pass=False
    return arg_pass



if __name__=="__main__":
    main()