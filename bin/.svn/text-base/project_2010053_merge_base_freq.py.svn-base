'''
Created on Mar 9, 2011

@author: tcezard
'''
from utils import utils_logging

from IO_interface import vcfIO
import sys, os
import pprint


def get_het_snps_from_genotype(vcf_file,output_file_16,output_file_3,output_file_4):
    file_handle = utils_logging.open_input_file(vcf_file, pipe=False)
    output_fh_16 = utils_logging.open_output_file(output_file_16, pipe=False)
    output_fh_3 = utils_logging.open_output_file(output_file_3, pipe=False)
    output_fh_4 = utils_logging.open_output_file(output_file_4, pipe=False)
    
    reader  = vcfIO.VcfReader(file_handle)
    all_samples = reader.get_sample_names()
    sample_16=[]
    sample_3=[]
    sample_4=[]
    sample_161=['161R1','161R2','161R3']
    sample_168=['168R1','168R2','168R3']
    sample_16C=['16CR1','16CR2','16CR3']
    sample_31=['31R1','31R2','31R3']
    sample_38=['38R1','38R2','38R3']
    sample_3C=['3CR1','3CR2','3CR3']
    sample_41=['41R1','41R2','41R3']
    sample_48=['48R1','48R2','48R3']
    sample_4C=['4CR1','4CR2','4CR3']
    for sample in all_samples:
        if sample.startswith('16'):
            sample_16.append(sample)
        if sample.startswith('4'):
            sample_4.append(sample)
        if sample.startswith('3'):
            sample_3.append(sample)
    number_discordant_16=0
    number_discordant_3=0
    number_discordant_4=0
    number_het_16=0
    number_het_4=0
    number_het_3=0
    total_line=0
    for line in reader:
        total_line+=1        
        #test if all the samples of the same type say the same things
        no_16=False
        no_4=False
        no_3=False
        record = vcfIO.VcfRecord(line, reader.get_sample_names())
        
        all_genotypes_16 = record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_16)
        all_genotypes_4 = record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_4)
        all_genotypes_3 = record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_3)
        if len(all_genotypes_16)>1:
            if len(record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_161))>1 or\
               len(record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_168))>1 or\
               len(record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_16C))>1 :
                number_discordant_16+=1
                no_16 =True
        if len(all_genotypes_4)>1:
            if len(record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_41))>1 or\
               len(record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_48))>1 or\
               len(record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_4C))>1 :
                number_discordant_4+=1
                no_4 =True
        if len(all_genotypes_3)>1:
            if len(record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_31))>1 or\
               len(record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_38))>1 or\
               len(record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_3C))>1 :
                number_discordant_3+=1
                no_3 =True
        
        sp_line = line.strip().split('\t')
        
        if sp_line[0]=='scaffold00512' and sp_line[1]=='1305800':
            print sp_line[0], sp_line[1]
            print 'no_3=%s'%no_3
            test = record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=sample_3C)
            pprint.pprint(test)
        
        bases=[sp_line[3]]
        bases.extend(sp_line[4].split(','))
        if not no_16:
            genotypes=set()
            for genotype in all_genotypes_16.keys():
                genotypes.update(set(genotype.split('/')))
            if len(genotypes)==2:
                tmp = list(genotypes)
                tmp.sort()
                output_fh_16.write('%s\t%s\t%s\t%s\n'%(sp_line[0], sp_line[1], bases[int(tmp[0])], bases[int(tmp[1])]))
                number_het_16+=1
        if not no_4:
            genotypes=set()
            for genotype in all_genotypes_4.keys():
                genotypes.update(set(genotype.split('/')))
            if len(genotypes)==2:
                tmp = list(genotypes)
                tmp.sort()
                output_fh_4.write('%s\t%s\t%s\t%s\n'%(sp_line[0], sp_line[1], bases[int(tmp[0])], bases[int(tmp[1])]))
                number_het_4+=1
        if not no_3:
            genotypes=set()
            for genotype in all_genotypes_3.keys():
                genotypes.update(set(genotype.split('/')))
            if len(genotypes)==2:
                tmp = list(genotypes)
                tmp.sort()
                output_fh_3.write('%s\t%s\t%s\t%s\n'%(sp_line[0], sp_line[1], bases[int(tmp[0])], bases[int(tmp[1])]))
                number_het_3+=1
    output_fh_16.close()
    output_fh_4.close()
    output_fh_3.close()
    
    print 'total number snps looked at=%s'%total_line
    print 'number het snps for 16=%s (%.2f%%)'%(number_het_16,number_het_16/float(total_line)*100)
    print 'number discordant base for 16=%s (%.2f%%)'%(number_discordant_16, number_discordant_16/float(total_line)*100)
    print 'number het snps for 4=%s (%.2f%%)'%(number_het_4,number_het_4/float(total_line)*100)
    print 'number discordant base for 4=%s (%.2f%%)'%(number_discordant_4, number_discordant_4/float(total_line)*100)
    print 'number het snps for 3=%s (%.2f%%)'%(number_het_3,number_het_3/float(total_line)*100)
    print 'number discordant base for 3=%s (%.2f%%)'%(number_discordant_3, number_discordant_3/float(total_line)*100)
    
    
def load_snps_from_snp_file(list_position_snp):
    all_snps_loaded={}
    open_snp = open(list_position_snp,'r')
    for line in open_snp:
        sp_line=line.strip().split()
        all_snps_loaded['%s-%s'%(sp_line[0],sp_line[1])]='%s/%s'%(sp_line[2],sp_line[3])
    open_snp.close()
    return all_snps_loaded


def load_bases_freq_file(allele_freq_file, key, all_snps_loaded, all_bases_all_freq={}):
    open_freq_file = open(allele_freq_file)
    
    for line in open_freq_file:
        sp_line=line.split('\t')
        #contig00003     224     T       A       TT      6       A:0:0   T:6:0   C:0:0   G:0:0
        position='%s-%s'%(sp_line[0],sp_line[1])
        ref_and_alt = all_snps_loaded.get(position)
        if ref_and_alt:
            base1, base2=ref_and_alt.split('/')
        else: 
            continue
        for bases_coverage in sp_line[6:]:
            if bases_coverage.startswith(base1):
                dummy, high_qual, low_qual = bases_coverage.split(':')
                base1_cov = int(high_qual) + int(low_qual)
                #base1_cov = int(high_qual) 
            if bases_coverage.startswith(base2):
                dummy, high_qual, low_qual = bases_coverage.split(':')
                base2_cov = int(high_qual) + int(low_qual)
                #base2_cov = int(high_qual)
        if not all_bases_all_freq.has_key(position):
            all_bases_all_freq[position]={}
        position_info = all_bases_all_freq.get(position)
        position_info['base1']=base1
        position_info['base2']=base2
        position_info[key]=(base1_cov,base2_cov)
        
            
    open_freq_file.close()
    return all_bases_all_freq
    

def merge_base_freq(list_position_vcf, files_to_merge, output_file):
    print 'read %s'%list_position_vcf
    all_snps_loaded = load_snps_from_snp_file(list_position_vcf)
    all_samples=[]
    #pprint.pprint(all_snps_loaded)
    all_bases_all_freq = {}
    current_sample=''
    real_sample=''
    for file in files_to_merge:
        key = os.path.basename(file).split('_')[0]
        real_sample=key[:-2]
        if real_sample != current_sample:
            if current_sample:
                all_samples.append('%s_m'%current_sample)
            current_sample=real_sample
        all_samples.append(key)
        print 'read %s'%file
        load_bases_freq_file(file, key, all_snps_loaded, all_bases_all_freq)
    all_samples.append('%s_m'%real_sample)
    #pprint.pprint(all_bases_all_freq)
    print 'output to %s'%output_file
    open_output=open(output_file,'w')
    open_output.write('#contig\tposition\tbase1\tbase2\t%s\n'%('\t'.join(['%s\t%s'%(value,value) for value in all_samples])))
    for position in all_bases_all_freq.keys():
        out=[]
        out.extend(position.split('-'))
        all_frequencies = all_bases_all_freq.get(position)
        base1 = all_frequencies.pop('base1')
        base2 = all_frequencies.pop('base2')
        out.append(base1)
        out.append(base2)
        current_sample=''
        
        for sample in all_samples:
            if sample.endswith('_m'):
                continue
            real_sample=sample[:-2]
            if real_sample != current_sample:
                if current_sample:
                    out.append(str(merged_base1_cov))
                    out.append(str(merged_base2_cov))
                current_sample=real_sample
                merged_base1_cov=0
                merged_base2_cov=0
            values = all_frequencies.get(sample)
            if values:
                base1_cov, base2_cov = values
            else:
                base1_cov = 0
                base2_cov = 0
            merged_base1_cov+=base1_cov
            merged_base2_cov+=base2_cov
            out.append(str(base1_cov))
            out.append(str(base2_cov))
        if current_sample:
            out.append(str(merged_base1_cov))
            out.append(str(merged_base2_cov))
        open_output.write( '\t'.join(out)+'\n')
    open_output.close()
        

if __name__=="1__main__":
    vcf_file = sys.argv[1]
    output_file_16 = sys.argv[2]
    output_file_3 = sys.argv[3]
    output_file_4 = sys.argv[4]
    get_het_snps_from_genotype(vcf_file,output_file_16,output_file_3,output_file_4)

if __name__=="__main__":
    list_position_vcf = sys.argv[1]
    output_file=sys.argv[2]
    files_to_merge = sys.argv[3:]
    merge_base_freq(list_position_vcf, files_to_merge,output_file)
