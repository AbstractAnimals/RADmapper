'''
Created on 1 Mar 2010

@author: tcezard
'''
import utils
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid.axislines import SubplotZero

import numpy
import os
import sys
from utils import utils_logging, utils_commands
from snps_and_allele_frequency_from_bam import get_base_frequency_from_line

def get_coverage_from_command(command, start, end):
    
    coverage=[]
    pileup_stream,process=utils_commands.get_output_stream_from_command(command)
    previous_pos=start-1
    for line in pileup_stream:
        sp_line=line.split()
        position=int(sp_line[1])
        if position>=start and position<=end:
            if previous_pos<position-1:
                for i in range(previous_pos+1,position):
                    coverage.append(0)
            coverage.append(int(sp_line[3]))
        previous_pos=position
    if previous_pos<end:
        for i in range(previous_pos,end):
            coverage.append(0)
    return coverage

def graph_coverage_minus_properly_paired(bam_file, chr, start, end, window, output_dir):
    center=int(start)+(int(end)-int(start))/2
    new_start=center-window/2
    new_end=center+window/2
    #Get the coverage from the bam file
    command='samtools view -h %s %s:%s-%s | samtools pileup -S -'%(bam_file,chr,new_start,new_end)
    coverage=get_coverage_from_command(command, new_start, new_end)
    
    
    command='samtools view -h -f 2 %s %s:%s-%s | samtools pileup -S -'%(bam_file,chr,new_start,new_end)
    coverage_properly_paired=get_coverage_from_command(command, new_start, new_end)
    
    substract=[]
    for i in range(len(coverage)):
        substract.append(coverage[i]-coverage_properly_paired[i])
        
    x=range(new_start,new_end+1,1)
    fig = plt.figure()
    plt.plot(x,substract,'b-',label='unpaired')
    plt.axvline(x=start, color='r')
    plt.axvline(x=end, color='r')
    plt.xlim([new_start,new_end])
    plt.xlabel('Position')
    plt.ylabel('Coverage')
    plt.title('coverage - properly paired at %s:%s-%s'%(chr,new_start,new_end))
    plt.legend()
    plt.savefig(os.path.join(output_dir,'%s:%s-%s_5_coverage_minus_properly_paired.png'%(chr,start,end)))
    plt.close()
    
def get_base_frequency(command, start, end):
    pileup_stream,process=utils_commands.get_output_stream_from_command(command)
    previous_pos=start-1
    reference=[]
    non_reference=[]
    for line in pileup_stream:
        sp_line=line.split()
        position=int(sp_line[1])
        if position>=start and position<=end:
            if previous_pos<position-1:
                for i in range(previous_pos+1,position):
                    reference.append(0)
                    non_reference.append(0)
            info=get_base_frequency_from_line(line, bas_qual_threshold=0, map_qual_threshold=0)
            if info:
                ATCG,dummy=info
            else:
                ATCG={'A':0,'T':0,'C':0,'G':0}
            ref_base=sp_line[2].upper()
            if ATCG.get(ref_base):
                reference.append(ATCG.pop(ref_base))
            else:
                reference.append(0)
            non_ref_cov=0
            for non_ref_base in ATCG.keys():
                non_ref_cov+=ATCG.get(non_ref_base)
            non_reference.append(non_ref_cov)
        previous_pos=position
    if previous_pos<end:
        for i in range(previous_pos,end):
            reference.append(0)
            non_reference.append(0)
    return reference,non_reference


def graph_coverage_base_frequency(bam_file, chr, start, end, window, output_dir, genome_file):
    center=int(start)+(int(end)-int(start))/2
    new_start=center-window/2
    new_end=center+window/2
    #Get the coverage from the bam file
    command='samtools view -h %s %s:%s-%s | samtools pileup -f %s -S -s -'%(bam_file,chr,new_start,new_end,genome_file)
    reference, non_reference=get_base_frequency(command, new_start, new_end)
    coverage=get_coverage_from_command(command, new_start, new_end)
    non_reference_percent=[]
    for pos in range(len(coverage)):
        if coverage[pos]==0:
            non_reference_percent.append(0)
        else:
            non_reference_percent.append(float(non_reference[pos])/coverage[pos]*100)
    x=range(new_start,new_end+1,1)
    fig = plt.figure()
    #plt.plot(x,coverage,'b--',label='coverage')
    plt.plot(x,non_reference_percent,'g-',label='non reference coverage')
    plt.axvline(x=start, color='r', linestyle='--')
    plt.axvline(x=end, color='r', linestyle='--')
    plt.xlim([new_start,new_end])
    plt.xlabel('Position')
    plt.ylabel('% Coverage')
    plt.title('coverage - reference/non reference at %s:%s-%s'%(chr,new_start,new_end))
    plt.legend()
    plt.savefig(os.path.join(output_dir,'%s:%s-%s_7_coverage_reference_non_reference.png'%(chr,start,end)))
    plt.close()


def graph_coverage_properly_paired(bam_file, chr, start, end, window, output_dir):
    center=int(start)+(int(end)-int(start))/2
    new_start=center-window/2
    new_end=center+window/2
    #Get the coverage from the bam file
    command='samtools view -h %s %s:%s-%s | samtools pileup -S -'%(bam_file,chr,new_start,new_end)
    coverage=get_coverage_from_command(command, new_start, new_end)
    command='samtools view -h -f 2 %s %s:%s-%s | samtools pileup -S -'%(bam_file,chr,new_start,new_end)
    coverage_properly_paired=get_coverage_from_command(command, new_start, new_end)
    percent_properly_paired=[]
    for pos in range(len(coverage)):
        if coverage[pos]==0:
            percent_properly_paired.append(0)
        else:
            percent_properly_paired.append(float(coverage_properly_paired[pos])/coverage[pos]*100)
    x=range(new_start,new_end+1,1)
    fig = plt.figure()
    plt.plot(x,percent_properly_paired,'b-',label='paired')
    plt.axvline(x=start, color='r')
    plt.axvline(x=end, color='r')
    plt.xlim([new_start,new_end])
    plt.xlabel('Position')
    plt.ylabel('% Coverage')
    plt.title('coverage - %% properly paired at %s:%s-%s'%(chr,new_start,new_end))
    plt.legend()
    plt.savefig(os.path.join(output_dir,'%s:%s-%s_6_coverage_properly_paired.png'%(chr,start,end)))
    plt.close()


def graph_wrongly_paried_coverage(bam_file, chr, start, end, window, output_dir):
    center=int(start)+(int(end)-int(start))/2
    new_start=center-window/2
    new_end=center+window/2
    #Get the coverage from the bam file
    command='samtools view -h -F 2 %s %s:%s-%s | samtools pileup -S -'%(bam_file,chr,new_start,new_end)
    coverage_wrongly_paired=[]
    pileup_stream,process=utils_commands.get_output_stream_from_command(command)
    previous_pos=new_start-1
    for line in pileup_stream:
        sp_line=line.split()
        position=int(sp_line[1])
        if position>=new_start and position<=new_end:
            if previous_pos<position-1:
                for i in range(previous_pos+1,position):
                    coverage_wrongly_paired.append(0)
            coverage_wrongly_paired.append(int(sp_line[3]))
        previous_pos=position
    if previous_pos<new_end:
        for i in range(previous_pos,new_end):
            coverage_wrongly_paired.append(0)
    
    x=range(new_start,new_end+1,1)

    fig = plt.figure()
    plt.plot(x,coverage_wrongly_paired,'b-',label='unpaired')
    plt.axvline(x=start, color='r')
    plt.axvline(x=end, color='r')
    plt.xlim([new_start,new_end])
    plt.xlabel('Position')
    plt.ylabel('Coverage')
    plt.title('Unpaired coverage at %s:%s-%s'%(chr,new_start,new_end))
    plt.legend()
    plt.savefig(os.path.join(output_dir,'%s:%s-%s_4_unpaired_coverage.png'%(chr,start,end)))
    plt.close()
            
def graph_stranded_coverage(bam_file, chr, start, end, window, output_dir):
    center=int(start)+(int(end)-int(start))/2
    new_start=center-window/2
    new_end=center+window/2
    constant=200
    new_end+=constant
    #Get the coverage from the bam file on negative strand
    command='samtools view -h -f 16 %s %s:%s-%s | samtools pileup -S -'%(bam_file,chr,new_start,new_end)
    coverage_reverse_strand=[]
    pileup_stream,process=utils_commands.get_output_stream_from_command(command)
    previous_pos=new_start-1
    for line in pileup_stream:
        sp_line=line.split()
        position=int(sp_line[1])
        if position>=new_start and position<=new_end:
            if previous_pos<position-1:
                for i in range(previous_pos+1,position):
                    coverage_reverse_strand.append(0)
            coverage_reverse_strand.append(int(sp_line[3]))
        previous_pos=position
    if previous_pos<new_end:
        for i in range(previous_pos,new_end):
            coverage_reverse_strand.append(0)
    
    #Get the coverage from the bam file on positive strand
    command='samtools view -h -F 16 %s %s:%s-%s | samtools pileup -S -'%(bam_file,chr,new_start,new_end)
    coverage_forward_strand=[]
    pileup_stream,process=utils_commands.get_output_stream_from_command(command)
    previous_pos=new_start-1
    for line in pileup_stream:
        sp_line=line.split()
        position=int(sp_line[1])
        if position>=new_start and position<=new_end:
            if previous_pos<position-1:
                for i in range(previous_pos+1,position):
                    coverage_forward_strand.append(0)
            coverage_forward_strand.append(int(sp_line[3]))
        previous_pos=position
    if previous_pos<new_end:
        for i in range(previous_pos,new_end):
            coverage_reverse_strand.append(0)
    new_end-=constant
    
    x=range(new_start,new_end+1,1)

    fig = plt.figure()
    plt.plot(x,coverage_forward_strand[:-constant],'b-',label='forward')
    plt.plot(x,coverage_reverse_strand[:-constant],'g-',label='reverse')
    plt.axvline(x=start, color='r')
    plt.axvline(x=end, color='r')
    plt.xlim([new_start,new_end])
    plt.xlabel('Position')
    plt.ylabel('Coverage')
    plt.title('Stranded coverage at %s:%s-%s'%(chr,new_start,new_end))
    plt.legend()
    plt.savefig(os.path.join(output_dir,'%s:%s-%s_1_stranded_coverage.png'%(chr,start,end)))
    plt.close()
    
    correlations=[]
    for lag in range(0,400):
        c = numpy.correlate(coverage_forward_strand, coverage_reverse_strand[lag:])
        correlations.append(c[0])
    lag=correlations.index(max(correlations))+1

    plt.figure()
    plt.plot(x,coverage_forward_strand[:-constant],'b-',label='forward')
    plt.plot(x,coverage_reverse_strand[lag:-(constant-lag)],'g-',label='reverse')
    plt.axvline(x=start, color='r')
    plt.axvline(x=end, color='r')
    plt.xlim([new_start,new_end])
    plt.xlabel('Position')
    plt.ylabel('Coverage')
    plt.title('Shifted stranded coverage at %s:%s-%s'%(chr,new_start,new_end))
    plt.legend()
    plt.savefig(os.path.join(output_dir,'%s:%s-%s_2_shifted_stranded_coverage.png'%(chr,start,end)))
    plt.close()
    
    substract=[]
    for i in range(len(coverage_forward_strand[:-lag])):
        if coverage_forward_strand[i]+coverage_reverse_strand[lag+i]==0:
            substract.append(0)
        else:
            substract.append(float(coverage_forward_strand[i]-coverage_reverse_strand[lag+i])/\
                             (coverage_forward_strand[i]+coverage_reverse_strand[lag+i]))

    plt.figure()
    plt.plot(x,substract[:-(constant-lag)],'k-',label='Difference sum ratio')
    plt.axvline(x=start, color='r')
    plt.axvline(x=end, color='r')
    plt.xlim([new_start,new_end])
    plt.xlabel('Position')
    plt.ylabel('ratio')
    plt.title('Difference sum ratio of stranded coverage at %s:%s-%s'%(chr,new_start,new_end))
    #plt.legend()
    plt.savefig(os.path.join(output_dir,'%s:%s-%s_3_substract_stranded_coverage.png'%(chr,start,end)))
    plt.close()

if __name__=="__main__":
    utils_logging.init_logging()
    regions={'chab05':[(219580,219864),(544696,546004)],
             'chab07':[(609473,610175),(920434,920624)],
             'chab09':[(112963,113790),(113795,113832)],
             'chab11':[(1531375,1531539)],
             'chab12':[(729685,729898),(865165,865931),(1224246,1224495),(1681837,1683110)],
             'chab13':[(1644904,1645633)],
             'chab14':[(1538887,1538984),(1753889,1759011),(1838268,1838549)]}
    window=10000
    #bam_file='/home/tcezard/projects/2009119_Paul_Hunt/AM_553/level2/s_1_sequence_sanger_sorted.bam'
    #output_dir='/home/tcezard/projects/2009119_Paul_Hunt/AM_553/level3/suppl_graphs/'
    bam_file='/home/tcezard/projects/2009119_Paul_Hunt/AM_555/level2/s_3_sequence_sanger_sorted.bam'
    output_dir='/home/tcezard/projects/2009119_Paul_Hunt/AM_555/level3/suppl_graphs/'
    
    genome_file='/home/tcezard/genomes/plasmodium_chabaudi/PlasmoDB-6.3/PchabaudiGenomic_PlasmoDB-6.3.fasta'
    utils.createDirectories('', [output_dir])
    for chr in regions.keys():
        array_of_ranges=regions.get(chr)
        for i,r in enumerate(array_of_ranges):
            s,e=r
            #if chr!='chab05' or s==219580:
            #    continue
            center=int(s)+(int(e)-int(s))/2
            #if int(e)-int(s)<300:
            #    window=600
            #elif int(e)-int(s)<400:
            #    window=800
            #elif int(e)-int(s)<500:
            #    window=1000
            #elif int(e)-int(s)<1000:
            #    window=2000
            if int(e)-int(s)<2000:
                window=4000
            elif int(e)-int(s)<3000:
                window=6000
            elif int(e)-int(s)<4000:
                window=8000
            elif int(e)-int(s)<5000:
                window=10000
            new_bound=(center-window/2, center+window/2)
            print '%s:%s-%s'%(chr, center-window/2, center+window/2)
            graph_wrongly_paried_coverage(bam_file, chr, s, e, window, output_dir)
            graph_stranded_coverage(bam_file, chr, s, e, window, output_dir)
            graph_coverage_minus_properly_paired(bam_file, chr, s, e, window, output_dir)
            graph_coverage_properly_paired(bam_file, chr, s, e, window, output_dir)
            graph_coverage_base_frequency(bam_file, chr, s, e, window, output_dir,genome_file)
            