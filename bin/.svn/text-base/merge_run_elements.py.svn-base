'''
Created on 26 Jul 2010

@author: tcezard
'''
import glob
from pipeline_directory_structure import create_directory_structure
import os
from utils import utils_param, utils_logging
import logging
import command_runner
import sys
from optparse import OptionParser
import utils
from utils.utils_commands import shellize_file_name
from wiki_communication import get_wiki_project
from utils.parameters import Config_file_error

ALIGNER_BWA='bwa'
ALIGNER_GSNAP='gsnap'
ALL_ALIGNERS=[ALIGNER_BWA,ALIGNER_GSNAP]


def find_bwa_align_run_elemt(all_projects_dir, project_id, sample_id, run_elemt_id):
    path = '%s/%s*/%s*/%s*/bwa/%s*_sorted.bam'%(all_projects_dir, project_id,
                                                shellize_file_name(sample_id), run_elemt_id, run_elemt_id)
    logging.debug('check %s'%path)
    existing_path = glob.glob(path)
    logging.debug('found %s'%' '.join(existing_path))  
    if len(existing_path)==1:
        return existing_path[0]
    else:
        return None

def find_gsnap_align_run_elemt(all_projects_dir, project_id, sample_id, run_elemt_id):
    path = '%s/%s*/%s*/%s*/gsnap/%s*_fixed.bam'%(all_projects_dir, project_id,
                                                shellize_file_name(sample_id), run_elemt_id, run_elemt_id)
    logging.debug('check %s'%path)
    existing_path = glob.glob(path)
    logging.debug('found %s'%' '.join(existing_path))  
    if len(existing_path)==1:
        return existing_path[0]
    else:
        return None

def merge_all_bam_files(all_bam_files, merged_file, samtools_bin='samtools', merge_bam_jar=None, stats=False):
    if len(all_bam_files)>1:
        if merge_bam_jar:
            ' '.join(['INPUT=%s'%(path) for path in all_bam_files])
            options="MERGE_SEQUENCE_DICTIONARIES=true VALIDATION_STRINGENCY=LENIENT USE_THREADING=true CREATE_INDEX=true"
            command = 'java -jar %s  OUTPUT=%s %s %s'%(merge_bam_jar, merged_file,' '.join(['INPUT=%s'%(path) for path in all_bam_files]), options)
        else:
            command = '%s merge %s %s'%(samtools_bin,merged_file, ' '.join(all_bam_files))
    elif len(all_bam_files)>0:
        command = 'ln -s %s %s'%(all_bam_files[0],merged_file)
    if stats:
        merged_file_stat=merged_file+'.stat'
        command+='; %s flagstat %s > %s'%(samtools_bin,merged_file, merged_file_stat)

    return command_runner.run_command(command)

def merge_run_elements_by_sample(all_projects_dir, project_id, overwrite=False, stats=True, aligner=ALIGNER_BWA):
    project=get_wiki_project(project_id)
    samples=project.get_samples()
    
    pipeline_param=utils_param.get_pipeline_parameters()
    try:
        pipeline_param=utils_param.get_pipeline_parameters()
        picard_dir=pipeline_param.get_picard_dir()
        samtools_dir=pipeline_param.get_samtools_dir()
    except Config_file_error, e:
        try:
            pipeline_param=utils_param.get_pipeline_parameters()
            samtools_dir=pipeline_param.get_samtools_dir()
            picard_dir=None
        except Config_file_error, e:
            logging.warning("You'll need to have samtools in your path")
            samtools_dir=''
            picard_dir=None
        
    if picard_dir is not None:
        merge_bam_jar = os.path.join(picard_dir,'MergeSamFiles.jar')
    else:
        merge_bam_jar = None  
    samtools_bin=os.path.join(samtools_dir,'samtools')
    
    if aligner==ALIGNER_BWA:
        find_element=find_bwa_align_run_elemt
        merged_directory='bwa_merged'
    elif aligner == ALIGNER_GSNAP:
        find_element=find_gsnap_align_run_elemt
        merged_directory='gsnap_merged'
    else:
        logging.error("unrecognised aligner %s"%aligner)
        return
    
    for sample in samples:
        run_elements = sample.get_run_elements()
        all_paths=[]
        for run_elemt in run_elements:
            path_to_alignment = find_element(all_projects_dir, project_id, sample.id, run_elemt.id)
            if path_to_alignment:
                all_paths.append(path_to_alignment)
        if len(all_paths)>0:
            dummy, sample_dir, dummy = create_directory_structure(all_projects_dir, project_id, sample.id, None)
            bwa_merge_dir = os.path.join(sample_dir,merged_directory)
            utils.createDirectories('',[bwa_merge_dir])
            merged_file=os.path.join(bwa_merge_dir,'%s_%s_run_elemt.bam'%(shellize_file_name(sample.id),len(all_paths)))
            if not utils.checkFile(merged_file) or overwrite:
                return_code = merge_all_bam_files(all_bam_files=all_paths, merged_file=merged_file,
                                    samtools_bin=samtools_bin, merge_bam_jar=merge_bam_jar, stats=stats)
            else:
                logging.warning('%s exist use force to overwrite'%merged_file)


def main():
    #initialize the logging
    utils_logging.init_logging(logging.INFO)
    #Setup options
    optparser=_prepare_optparser()
    (options,args) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    #command_runner.set_command_to_run_localy()
    if options.projects_dir is None:
        all_projects_folder=os.path.join('/ifs/liveprojects')
    else:
        all_projects_folder=options.projects_dir
    
    merge_run_elements_by_sample(all_projects_folder, options.project_id, stats=options.stats, aligner=options.aligner)
        
def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog -p <project_id> [-a aligner -s -P project_dir]"""
    description = """This script will merge elements that have been aligned independently into one bam file per sample."""
    
    prog_version=utils.getWtss_version()
    optparser = OptionParser(version="%prog of wtss_pipeline v"+prog_version,description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-p","--project",dest="project_id",type="string",
                         help="Project id for which the runs need to be merged for each samples. Default: %default")
    optparser.add_option("-a","--aligner",dest="aligner",type="string", default=ALIGNER_BWA,
                         help="The aligner used. choose from "+", ".join(ALL_ALIGNERS)+". Default: %default")
    optparser.add_option("-P","--projects_dir",dest="projects_dir",type="string",
                         help="Change the project dir from the default /ifs/liveprojects.")
    optparser.add_option("-s","--stats",dest="stats",action='store_true',default=False,
                         help="calculate stats on the merged bam file. Default: %default")
    optparser.add_option("--print",dest="print_commands",action='store_true',default=False,
                         help="Print the command instead of running them. Default: %default")
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    
    if not options.project_id :
        logging.error("You must specify a project id with -p.")
        arg_pass=False
    return arg_pass



if __name__=="__main__":
    main()       