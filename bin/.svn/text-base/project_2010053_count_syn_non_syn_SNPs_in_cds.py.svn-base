'''
Created on Mar 9, 2011
@author: tcezard
'''
from utils import utils_logging, DNA_tools

from IO_interface import vcfIO, annotation_loader
import sys
import pprint
from utils import GenomeLoader
import logging
from utils.FastaFormat import FastaWriter


def calculate_diversity_from_snps(vcf_file, annotation_file, genome_file,output_file):
    sample_sets=[]
    samples_1=['31R1','31R2','31R3'] 
    samples_8=['38R1','38R2','38R3']
    samples_C=['3CR1','3CR2','3CR3']
    sample_name='3'
    sample_sets.append((sample_name,samples_1,samples_8,samples_C))
    samples_1=['41R1','41R2','41R3'] 
    samples_8=['48R1','48R2','48R3']
    samples_C=['4CR1','4CR2','4CR3']
    sample_name='4'
    sample_sets.append((sample_name,samples_1,samples_8,samples_C))
    samples_1=['161R1','161R2','161R3'] 
    samples_8=['168R1','168R2','168R3']
    samples_C=['16CR1','16CR2','16CR3']
    sample_name='16'
    sample_sets.append((sample_name,samples_1,samples_8,samples_C))
    
    file_handle = utils_logging.open_input_file(vcf_file, pipe=False)
    reader  = vcfIO.VcfReader(file_handle)
    all_snps_per_transcript={}
    logging.info('load vcf file %s '%vcf_file)
    nb_snps=0
    for vcf_record in reader:
        if vcf_record.vcf_line_split[39]=='cds': #39
            nb_snps+=1
            if all_snps_per_transcript.has_key(vcf_record.vcf_line_split[36]):#36
                all_snps_per_transcript[vcf_record.vcf_line_split[36]].append(vcf_record)
            else:
                all_snps_per_transcript[vcf_record.vcf_line_split[36]]=[vcf_record]
    logging.info('%s snps loaded from %s '%(nb_snps,vcf_file))
      
    genome_loader=GenomeLoader.GenomeLoader(genome_file, keep_in_memory=True, keep_until_done=True)
    annotation_retriver=annotation_loader.Annotation_Retriver(annotation_file=annotation_file)
    
    all_chr = genome_loader.load_all()
    for reference_chr in all_chr:
        all_annotations = annotation_retriver.get_annotation_from_chr(reference_chr)
        header, chr_sequence = genome_loader.get_chr(reference_chr)
        if all_annotations:
            for gene in all_annotations:
                #only one transcript per gene should be use 
                #arbitrarily work with the first one
                if len(gene.transcript_list)>1:
                    gene.transcript_list.sort()
                    transcript_list=gene.transcript_list[0:1]
                else:
                    transcript_list=gene.transcript_list[:]
                
                for transcript in transcript_list:
                    output_handle=open(output_file+'_'+transcript.transcript_id+'.fa','w')
                    fasta_writter = FastaWriter(output_handle, line_length=60)
                    snps = all_snps_per_transcript.get(transcript.transcript_id)
                    for (sample_name,samples_1,samples_8,samples_C) in sample_sets:
                        
                        (cdna_sequence_allele1,snp_on_cdna_1,
                        cdna_sequence_allele2,snp_on_cdna_2 )= get_cdna_from_samples(transcript, chr_sequence,
                                                                                               all_vcf_record=snps, 
                                                                                               samples_1=samples_1,
                                                                                               samples_8=samples_8, 
                                                                                               samples_C=samples_C)
                        print_fasta(fasta_writter,transcript.transcript_id, sample_name=sample_name,allele='allele_1',
                                    snps_on_cdna=snp_on_cdna_1,cdna_sequence=cdna_sequence_allele1)
                        print_fasta(fasta_writter,transcript.transcript_id, sample_name=sample_name,allele='allele_2',
                                    snps_on_cdna=snp_on_cdna_2,cdna_sequence=cdna_sequence_allele2)
                    fasta_writter.close()
                    output_handle.close()
                    fasta_writter=None
                    
def get_cdna_from_samples(transcript, chr_sequence, all_vcf_record, samples_1=[],samples_8=[], samples_C=[]):
    """Get the cdna sequence of the given transcript and change with the snps information from the given snps records"""
    cdna_sequence_allele = transcript.get_cdna_sequence(chr_sequence,complete_sequence=False,trim_sequence=True)
    cdna_sequence_allele1=cdna_sequence_allele
    cdna_sequence_allele2=cdna_sequence_allele
    snp_on_cdna_1=[]
    snp_on_cdna_2=[]
    if all_vcf_record:
        for vcf_record in all_vcf_record:
            reference = vcf_record.get_reference()
            position = vcf_record.get_position()
            all_genotypes_1 = vcf_record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=samples_1)
            all_genotypes_8 = vcf_record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=samples_8)
            all_genotypes_C = vcf_record.get_valid_genotype_per_sample(genotype_quality_threshold=20, sample_list=samples_C)
            genotype=set()
            if len(all_genotypes_1)==1:
                genotype.update(set(all_genotypes_1.keys()[0].split('/')))
            if len(all_genotypes_8)==1:
                genotype.update(set(all_genotypes_8.keys()[0].split('/')))
            if len(all_genotypes_C)==1:
                genotype.update(set(all_genotypes_C.keys()[0].split('/')))
            if len(genotype)>0:
                if DNA_tools.strand_is_positive(transcript.strand):
                    ref_base = vcf_record.get_reference_base()
                    alt_base = vcf_record.get_alt_bases()[0]
                else:
                    ref_base = DNA_tools.complements(vcf_record.get_reference_base())
                    alt_base = DNA_tools.complements(vcf_record.get_alt_bases()[0])
                pos_in_cdna = transcript.get_position_in_cdna(position)
                if pos_in_cdna>=len(cdna_sequence_allele):
                    #This happens when the cdna get trimmed and a snp is at the end of the cdna
                    #Skip those
                    continue
                if len(genotype)==1:
                    g = genotype.pop()
                    if g == '0':
                        allele_1=ref_base
                    else:
                        allele_1=alt_base
                        snp_on_cdna_1.append('%s:%s/%s'%(pos_in_cdna,ref_base,alt_base))
                        snp_on_cdna_2.append('%s:%s/%s'%(pos_in_cdna,ref_base,alt_base))
                    allele_2=allele_1
                if len(genotype)==2:
                    g = genotype.pop()
                    if g == '0':
                        allele_1=ref_base
                    else:
                        allele_1=alt_base
                        snp_on_cdna_1.append('%s:%s/%s'%(pos_in_cdna,ref_base,alt_base))
                    g = genotype.pop()
                    if g == '0':
                        allele_2=ref_base
                    else:
                        allele_2=alt_base
                        snp_on_cdna_2.append('%s:%s/%s'%(pos_in_cdna,ref_base,alt_base))
                        
                if cdna_sequence_allele[pos_in_cdna-1] == ref_base:
                    cdna_sequence_allele1 = cdna_sequence_allele1[:pos_in_cdna-1]+allele_1+cdna_sequence_allele1[pos_in_cdna:]
                    cdna_sequence_allele2 = cdna_sequence_allele2[:pos_in_cdna-1]+allele_2+cdna_sequence_allele2[pos_in_cdna:]
                else:
                    error='strand=%s, position %s:%s, %s:%s in cDNA reference base in snps is %s base in cDNA is %s'
                    error=error%(transcript.strand, reference,position,transcript.transcript_id,pos_in_cdna,ref_base, cdna_sequence_allele1[pos_in_cdna-1])
                    logging.error(error)
                    print cdna_sequence_allele1[pos_in_cdna-6:pos_in_cdna+5]
                
                    
    return (cdna_sequence_allele1,snp_on_cdna_1, cdna_sequence_allele2,snp_on_cdna_2)


def print_fasta(fasta_writter,transcript_id, sample_name,allele,snps_on_cdna, cdna_sequence):
    out=[]
    out.append(transcript_id)
    out.append(sample_name)
    out.append(allele)
    
    out.extend(snps_on_cdna)
    fasta_writter.start_sequence('_'.join(out))
    fasta_writter.write_sequence(cdna_sequence)
                    
    
    
          
if __name__=="__main__":
    utils_logging.init_logging(logging.INFO)
    vcf_file = sys.argv[1]
    annotation_file = sys.argv[2]
    genome_file = sys.argv[3]
    output_file=sys.argv[4]
    calculate_diversity_from_snps(vcf_file, annotation_file, genome_file,output_file)
