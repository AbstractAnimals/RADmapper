'''
Created on 9 Sep 2010

@author: tcezard
'''
import os
from utils import utils_logging
import logging


import command_runner
import glob
import re
import sys
from optparse import OptionParser
import pprint
from wiki_communication.wiki_pages_utils import get_run_page_from_title



def update_page(page_title, real=False):
    wiki_run_page = get_run_page_from_title(page_title, type='SOLEXA', allow_blank_page=True)
    #for lane in wiki_run_page.run.get_lanes():
    #    print lane.get_lane_number()
    #    for re in lane.get_run_elemt():
    #        print re.get_nb_reads_with_adapter_1()
    #        print re.get_nb_reads_with_adapter_2()  
    if real:
        a,b = wiki_run_page.upload_to_wiki(test_wiki=False)
    else:
        a,b = wiki_run_page.upload_to_wiki(test_wiki=True)
    print a
    print b
    
    
def main():
    #initialise the logging
    utils_logging.init_logging(logging.DEBUG)
    #Setup options
    optparser=_prepare_optparser()
    (options,dummy) = optparser.parse_args()
    #verify options
    arg_pass=_verifyOption(options)
    if not arg_pass:
        logging.warning(optparser.get_usage())
        logging.critical("Non valid arguments: exit")
        sys.exit(1)
    command_runner.set_command_to_run_localy()
    update_page(options.page_title, options.real)
    
def _prepare_optparser():
    """Prepare optparser object. New options will be added in this
    function first.
    """
    usage = """usage: %prog """
    description = """"""
    
    prog_version='0'
    optparser = OptionParser(version="%prog of wtss_pipeline v"+prog_version,description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="show this help message and exit.")
    optparser.add_option("-p", "--page_title",dest="page_title",type="string",
                         help="The page title to update. Default: %default")
    optparser.add_option("--real",dest="real",action="store_true",
                         help="Upload the page to the real wiki instead of the test wiki. Default: %default")
    return optparser


def _verifyOption(options):
    """Check if the mandatory option are present in the options objects.
    @return False if any argument is wrong."""
    arg_pass=True
    # Test output_file
    return arg_pass

if __name__=='__main__':
    main()

#if __name__=='__main__':
#    log_file = os.path.join(os.path.expanduser('~'),'check_for_new_run.log')
#    formatter=logging.Formatter('%(levelname)s {%(asctime)s}: %(message)s')
#    utils_logging.init_logging(output_level=logging.DEBUG, file_level=logging.INFO,
#                               log_file_name=log_file, overwrite=False, formatter=formatter)
#    command_runner.set_command_to_run_localy()
#    check_for_new_run()
    
if __name__=='1__main__':
    utils_logging.init_logging(logging.DEBUG)
    run_dir_title = '120502_SN182_0327_BD0R88ACXX'
    run_dir = os.path.join('/mnt/gaII/', run_dir_title)
    status = parse_status_xml(run_dir)
    print status.get('NumCycles'), status.get('TilesPerLane')
    print is_run_finished(run_dir, status.get('NumCycles'), int(status.get('TilesPerLane')))
    
    #copy_status_file_to_server(run_dir_title,
    #                           '/home/tcezard/temp/',
    #                           'genepool-web1.bio.ed.ac.uk' ,
    #                           '/data/Gene_Pool/run_info/')
